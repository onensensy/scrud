<?php
namespace App\Http\Controllers;

use App\Models\{{ studlyModelName }};
{{ imports }}
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Database\Eloquent\ModelNotFoundException;

class {{ controllerName }} extends Controller
{
    public $title;
    public $paginate = 10;

    public function __construct()
    {
        $this->title = ucfirst('{displayName}');
    }

    public function index(Request $request)
    {
        $title = $this->title;
        $sub_title = __FUNCTION__;

        $query = $request->input('query');

        if ($query) {
            # Perform search using the search method
            $listings = $this->search($query)->paginate($this->paginate);
        } else {
            # Retrieve all {{ studlyModelName }}s
            $listings = {{ studlyModelName }}::paginate($this->paginate);
        }

        return view('pages.backend.{{returnView}}.{{returnView}}-index', compact('listings', 'title', 'sub_title'));
    }

    public function create()
    {
        $title = $this->title;
        $sub_title = __FUNCTION__;

        {{ _dataRetrieve }}
        return view('pages.backend.{{returnView}}.{{returnView}}-create', compact('title', 'sub_title' {{ passable_ }}));
    }

    public function store(Request $request)
    {
        try {
            $title = $this->title;
            $sub_title = __FUNCTION__;

            # Validate request data
            $data = $request->validate({{ validationRules }});

            # Bool State
            # $data['is_active'] = $request->has('is_active') ? true : false;

            # Incase of image Upload
            # $data['image_path'] = $this->uploadFile($request, 'image_path', ['required']);

            # Create a new {{ studlyModelName }} instance
            {{ studlyModelName }}::create($data);

            return redirect()->route('{{returnView}}.index')->with('success', '{{ studlyModelName }} created successfully');
        } catch (ModelNotFoundException $exception) {
            return redirect()->back()->with('error', $exception->getMessage());
        }
    }

    public function show($id)
    {
        $title = $this->title;
        $sub_title = __FUNCTION__;

        try {
            # Retrieve the {{ studlyModelName }} with the given ID
            $data = {{ studlyModelName }}::findOrFail($id);
            return view('pages.backend.{{returnView}}.{{returnView}}-show', compact('data', 'title', 'sub_title'));
        } catch (ModelNotFoundException $exception) {
            return redirect()->route('{{returnView}}.index')->with('error', 'Resource not found');
        }
    }

    public function edit($id)
    {
        $title = $this->title;
        $sub_title = __FUNCTION__;

        try {
            # Retrieve the {{ studlyModelName }} with the given ID
            $data = {{ studlyModelName }}::findOrFail($id);

            {{ _dataRetrieve }}
            return view('pages.backend.{{returnView}}.{{returnView}}-create', compact('data', 'title', 'sub_title' {{ passable_ }}));
        } catch (ModelNotFoundException $exception) {
            return redirect()->route('{{returnView}}.index')->with('error', 'Resource not found');
        }
    }

    public function update(Request $request, $id)
    {
        $title = $this->title;
        $sub_title = __FUNCTION__;

        try {
            # Retrieve the {{ studlyModelName }} with the given ID
            $item = {{ studlyModelName }}::findOrFail($id);

            # Validate request data
            $data = $request->validate({{ validationRules }});

            # Incase of image Upload
            # $data['image_path'] = $this->uploadFile($request, 'image_path', ['required']);

            # if (is_null($data['image']))
            #    $data['image'] = $item->image;

            # Bool State
            # $data['is_active'] = $request->has('is_active') ? true : false;

            # Update the {{ studlyModelName }} instance
            $item->update($data);

            return redirect()->route('{{returnView}}.index')->with('success', '{{ studlyModelName }} updated successfully');
        } catch (ModelNotFoundException $exception) {
            return redirect()->route('{{returnView}}.index')->with('error', 'Resource not found');
        }
    }

    public function destroy($id)
    {
        $title = $this->title;
        $sub_title = __FUNCTION__;

        try {
            # Retrieve the {{ studlyModelName }} with the given ID
            $data = {{ studlyModelName }}::findOrFail($id);

            # Delete the {{ studlyModelName }} instance
            $data->delete();

            return redirect()->route('{{returnView}}.index')->with('success', '{{ studlyModelName }} deleted successfully');
        } catch (ModelNotFoundException $exception) {
            return redirect()->route('{{returnView}}.index')->with('error', 'Resource not found');
        }
    }

    private function search($query)
    {
        # Perform search on {{ studlyModelName }} model
        #return {{ studlyModelName }}::where('column_name', 'LIKE', "%{$query}%")->paginate($this->paginate); // Adjust 'column_name' as needed
    {{search}}
    }
}
